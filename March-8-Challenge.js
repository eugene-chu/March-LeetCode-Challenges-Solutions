/**
 * Given a string s (consist only of letters 'a' and 'b'). In a single step, remove a palindromic subsequence from s
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
 * 
 * Return the minimum amount of steps required to get to an empty string.
 * @param {*} s 
 * 
 * I: A string s, containing 'a's and 'b's
 * O: An int where the minimum number o fsteps required to empty the strings by palindrom subsequences
 * C: S only contains letters 'a's and 'b's. 0 <= S <= 1000
 * E: S = 'ababa', out: 1; S = 'abb', out: '2'; S = 'baabb', out: '2'; S = '', out = 0;
 * 
 * 
 * 
 * if the full string is ever a palindrome, it will only do it once.
 * because we are removing a palindromic subsequence, and the subsequence does not have to be in a consecutive order, the remaining string will be a palindrome.
 * therefore, it will always be 2.
 * 
 * So there 3 return conditions are:
 * empty string = 0
 * isPalindrome = 1
 * !isPlaindrome = 2
 */

/**
 * @param {string} s
 * @return {number}
 * 
 * run time: 96 ms, 39.1 mem used;
 */
var removePalindromeSub = function(s) {
  let count = 0;
  let removePal = (s) => {
    let rpointer = s.length-1;
    let i = 0, j = s.length-1;
    while(i < j){
      if(s[i] === s[j]){
        i++;
        j--;
      }
      if(s[i] !== s[j]){
        i = 0;
        rpointer--;
        j = rpointer;
      }
    }
    return s.slice(rpointer+1);
  }
  while(s.length !== 0){
    s = removePal(s);
    count++;
  }
  if(count > 2){
    count = 2;
  }
  return count;
};

console.log(removePalindromeSub('abababa')); // > 1
console.log(removePalindromeSub('abb')); // > 2
console.log(removePalindromeSub('baabb')); // > 2
console.log(removePalindromeSub('')); // > 0
console.log(removePalindromeSub('abaabaabba')); // > 2
console.log(removePalindromeSub('bbaabaaa')); // > 3


// sample 76ms code:
/**
  var removePalindromeSub = function(s) {
  let res = false;
  let pointer1 = 0;
  let pointer2 = s.length-1;
  if(s === ""){
    return 0
  }
  while(pointer1 < pointer2){
    if(s[pointer1] === s[pointer2]){
      pointer1++;
      pointer2--
    } else{
      return 2
    }
    
  }
  return 1
      
  };
 */

 // sample 80ms and 38.6 mb code:
 /**
  var removePalindromeSub = function(s) {
      if (s == '') return 0;
      
      const isPalindrome = () => {
          let left = 0;
          let right = s.length - 1;
          
          while (left < right){
              if (s[left] !== s[right]){
                  return false
              }
              
              left++
              right--
          }
          
          return true
      }
      
      if (isPalindrome()){
          return 1
      } else {
          return 2
      }
  };
  */